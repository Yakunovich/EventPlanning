// <auto-generated />
using System;
using EventPlanningBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventPlanningBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventPlanningBackend.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.AccountAdditionalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountAdditionalField");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentParticipants")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Stadium",
                            Name = "Sport Event",
                            Theme = "Sport"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Concert Hall",
                            Name = "Music Concert",
                            Theme = "Music"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Convention Center",
                            Name = "Tech Conference",
                            Theme = "Technology"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Art Gallery",
                            Name = "Art Expo",
                            Theme = "Art"
                        });
                });

            modelBuilder.Entity("EventPlanningBackend.Models.EventAdditionalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAdditionalField");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            FieldName = "Topic",
                            FieldValue = "Sports"
                        },
                        new
                        {
                            Id = 2,
                            EventId = 1,
                            FieldName = "Participants",
                            FieldValue = "Athletes"
                        },
                        new
                        {
                            Id = 3,
                            EventId = 2,
                            FieldName = "Genre",
                            FieldValue = "Rock"
                        },
                        new
                        {
                            Id = 4,
                            EventId = 2,
                            FieldName = "Dress Code",
                            FieldValue = "Casual"
                        },
                        new
                        {
                            Id = 5,
                            EventId = 3,
                            FieldName = "Focus Area",
                            FieldValue = "AI & ML"
                        },
                        new
                        {
                            Id = 6,
                            EventId = 3,
                            FieldName = "Keynote Speaker",
                            FieldValue = "Dr. Tech Guru"
                        },
                        new
                        {
                            Id = 7,
                            EventId = 4,
                            FieldName = "Art Styles",
                            FieldValue = "Modern"
                        },
                        new
                        {
                            Id = 8,
                            EventId = 4,
                            FieldName = "Exhibitors",
                            FieldValue = "Various Artists"
                        });
                });

            modelBuilder.Entity("EventPlanningBackend.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.AccountAdditionalField", b =>
                {
                    b.HasOne("EventPlanningBackend.Models.Account", "Account")
                        .WithMany("AccountAdditionalFields")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.EventAdditionalField", b =>
                {
                    b.HasOne("EventPlanningBackend.Models.Event", "Event")
                        .WithMany("EventAdditionalFields")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.Registration", b =>
                {
                    b.HasOne("EventPlanningBackend.Models.Account", "Account")
                        .WithMany("Registrations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventPlanningBackend.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.Account", b =>
                {
                    b.Navigation("AccountAdditionalFields");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("EventPlanningBackend.Models.Event", b =>
                {
                    b.Navigation("EventAdditionalFields");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
